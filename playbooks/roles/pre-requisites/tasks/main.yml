---
- name: Check if aws cli is already installed
  shell: which aws
  register: aws_check
  ignore_errors: true

- name: Check to see if pip is already installed.
  command: "pip --version"
  ignore_errors: true
  changed_when: false
  register: pip_is_installed

- name: Giving RWX Permissions to tmp dir
  file:
   path: /tmp
   mode: 0777

- name: Create root directories
  file:
   path: "/{{ item }}"
   state: directory
   mode: 0777
   recurse: yes
  with_items:
      - "{{ base_dir }}"

- name: install zip/unzip, tar, ksh and other required packages
  yum: name={{ system_packages }} state=present

########################## If No AWS CLI ############################
- name: Transfer local packages
  copy:
   src: "{{ pip_file }}"
   dest: "{{ download_location }}/{{ pip_file }}"
  when: ((aws_check.stdout.find('no aws in') != -1)or(aws_check.stderr.find('no aws in') != -1))

- name: Transfer pexpect packages
  copy:
   src: "{{ pexpect_file }}"
   dest: "{{ download_location }}/{{ pexpect_file }}"
  when: ((aws_check.stdout.find('no aws in') != -1)or(aws_check.stderr.find('no aws in') != -1))

- name: Transfer pip file packages
  copy:
   src: "{{ awscli_package }}"
   dest: "{{ download_location }}/{{ awscli_package }}"
   when: ((aws_check.stdout.find('no aws in') != -1)or(aws_check.stderr.find('no aws in') != -1))

- name: Unarchive pip tar
  unarchive:
   src: "{{ download_location }}/{{ pip_file }}"
   dest:  "{{ download_location }}"
   copy: no
  when: ((aws_check.stdout.find('no aws in') != -1)or(aws_check.stderr.find('no aws in') != -1))
  ignore_errors: yes
   
- name: Install PIP
  command: /bin/bash -c "python setup.py install" chdir={{ download_location }}/pip-19.2.2
  ignore_errors: yes
  when: ((aws_check.stdout.find('no aws in') != -1)or(aws_check.stderr.find('no aws in') != -1))

- name: install Cli and pexpect Pacakges
  pip:
   name: file:{{ download_location }}/{{ item }}
  with_items:
      - "{{ awscli_package }}"
      - "{{ pexpect_file }}"
  when: ((aws_check.stdout.find('no aws in') != -1)or(aws_check.stderr.find('no aws in') != -1))
  ignore_errors: yes
################################################################################################

- name: Generate script file to download src from s3
  template:
   src: s3fetch.j2
   dest: /tmp/s3fetch.sh
   mode: 0777

- name: Create Source directory
  file:
   path: "{{ download_location }}"
   state: directory
   mode: 0777

- name: download pre-requiste src in location {{ download_location }}
  shell: "./s3fetch.sh binaries {{ item }} {{ download_location }}"
  args:
    chdir: "/tmp/"
  with_items:
      - "{{ python_packages }}"


- name: Unarchive pip tar
  unarchive:
   src: "{{ download_location }}/{{ pip_file }}"
   dest:  "{{ download_location }}"
   copy: no

- easy_install:
   name: pip
   state: present

   #- name: Install PIP
   #command: /bin/bash -c "python setup.py install {{ pip_file }}" 
   #args:
   #chdir: "{{ download_location }}"
   #ignore_errors: yes

- name: Unarchive setup Tools zip file
  unarchive:
   src: "{{ download_location }}/{{ setuptools_file }}"
   dest: "{{ download_location }}"
   remote_src: yes

- name: Install setup Tools
  command: /bin/bash -c "cd setup* && python setup.py install" 
  args:
   chdir: "{{ download_location }}"
  ignore_errors: yes

- name: install python packages
  command: pip install {{ item }}
  args:
   chdir: "{{ download_location }}"
  with_items:
      - "{{ python_packages }}"

- name: Install setup Tools
  command: /bin/bash -c "cd PyMySQL* && python setup.py install" 
  args:
   chdir: "{{ download_location }}"
  ignore_errors: yes

- name: Execute permissions for python packages
  file:
   path: /usr/lib/python2.7
   mode: 0775
   recurse: yes
